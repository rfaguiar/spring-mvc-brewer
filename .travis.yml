language: java
jdk:
 - oraclejdk8

services:
  - docker

addons:
  sonarcloud:
    organization: "rfaguiar-github" # "sonarcloud_organization_key"  the key of the org you chose at step #3
    token:
      secure: $SONAR_TOKEN # encrypted value of your token

script:
  # maven limpa pasta target, habilita pluguin qualidade, gera pasta target com pacotes,
  # gera analise sonar e gera imagen docker
  - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar dockerfile:build
  - docker image list #lista de images locais
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD #login dockerhub
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin #login dockerhub
  #- docker tag brewer $DOCKER_USERNAME/brewer #registra tag da imagen para fazer push
  - docker push $DOCKER_USERNAME/brewer #envia imagen docker para dockerhub

# deploy heroku via docker
after_success:
  # for local testing, needs to be set on travis, too:
  # export HEROKU_TOKEN=$(heroku auth:token)
- docker login -u _ -p "$HEROKU_API_KEY"  registry.heroku.com # login docker registry do heroku
- docker build -t registry.heroku.com/brewer-springmvc-app1/web -f Dockerfile . #cria imagen docker para docker registry
- docker push registry.heroku.com/brewer-springmvc-app1/web # enviar imagen para heroku
- heroku run --app brewer-springmvc-app1 # executa imagen no docker

# deploy com heroku via git
#deploy:
#  provider: heroku
#  api-key:
#   secure: $HEROKU_API_KEY
#  app: brewer-springmvc-app1